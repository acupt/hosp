<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <property name="LOG_HOME" value="/home/admin/log/hosp"/>

    <property name="PATTERN_SINGLE" value="%d{yyyy-MM-dd HH:mm:ss.SSS},%level,%thread,%msg%n"/>

    <property name="PATTERN_MUTI" value="%d{yyyy-MM-dd HH:mm:ss.SSS},%level,%logger,%thread,%msg%n"/>

    <appender name="stdoutAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${PATTERN_MUTI}</pattern>
        </encoder>
    </appender>

    <appender name="rootAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/root.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/root.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN_MUTI}</pattern>
        </encoder>
    </appender>

    <appender name="requestAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/request.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/request.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN_SINGLE}</pattern>
        </encoder>
    </appender>

    <appender name="serviceAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/service.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/service.%d{yyyy-MM-dd}.log</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>${PATTERN_MUTI}</pattern>
        </encoder>
    </appender>
    <logger name="com.acupt.service" level="info" additivity="false">
        <appender-ref ref="serviceAppender"/>
        <appender-ref ref="stdoutAppender"/>
    </logger>
    <logger name="com.acupt.aspect.ServiceAspect" level="info" additivity="false">
        <appender-ref ref="serviceAppender"/>
        <appender-ref ref="stdoutAppender"/>
    </logger>

    <!--<logger name="org" level="INFO" additivity="false"></logger>-->

    <logger name="com.acupt.hosp.filter.RequestFilter" level="info" additivity="false">
        <appender-ref ref="requestAppender"/>
        <appender-ref ref="stdoutAppender"/>
    </logger>

    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="info">
        <appender-ref ref="stdoutAppender"/>
        <appender-ref ref="rootAppender"/>
    </root>
</configuration>